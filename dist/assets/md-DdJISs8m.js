import{C as d,b as m,o as l,w as r,g as t,D as n,f as s,E as a,v as f,x as h,B as i}from"./modules/vue-BYAEyLR5.js";import{_}from"./ncolumns-CiuNPjLU.js";import{u as v,f as x}from"./slidev/context-B9LE-9jG.js";import"./SlideNumber-zqtocw-v.js";import"./index-BdTx6In9.js";import"./modules/shiki-D_EmBmyF.js";const E={__name:"modelcompression.md__slidev_54",setup(k){const{$clicksContext:p,$frontmatter:c}=v();return p.setup(),(w,e)=>{const o=d("click");return l(),m(_,f(h(i(x)(i(c),53))),{col1:r(u=>e[0]||(e[0]=[t("h2",null,"What Does DataFed TorchFlow Do?",-1),t("ul",null,[t("li",null,"Preserves script with a checksum."),t("li",null,"Maintains a copy or reference to the training data."),t("li",null,"Extracts the neural network model graph."),t("li",null,"Extracts the optimizer state and hyperparameters."),t("li",null,"Records the Python and hardware environment."),t("li",null,"Allows the addition of any custom metadata.")],-1)])),text:r(u=>[t("ul",null,[t("li",null,[n((l(),s("span",null,e[1]||(e[1]=[a("Pip installable python package ",-1),t("code",null,"pip install datafed_torchflow",-1)]))),[[o,3]])]),t("li",null,[n((l(),s("span",null,e[2]||(e[2]=[a("With a single instantiation provides a drag-and-drop replacement for ",-1),t("code",null,"model.save()",-1),a(" in PyTorch",-1)]))),[[o,3]])])])]),_:1},16)}}};export{E as default};
